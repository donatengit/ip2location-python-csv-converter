# This workflow will install Python dependencies, run tests and lint with a single version of Python
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python

name: Python application

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]
  schedule:
    - cron: "37 3 * * 2"

env:
  ipv4_dbname: DB1LITECSV
  ipv6_dbname: DB1LITECSVIPV6
  ipv4_csv: IP2LOCATION-LITE-DB1.CSV
  ipv6_csv: IP2LOCATION-LITE-DB1.IPV6.CSV

permissions:
  contents: read

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
    - name: Set up Python 3.10
      uses: actions/setup-python@v3
      with:
        python-version: "3.10"
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8 pytest ipaddress
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
    - name: Lint with flake8
      run: |
        # stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    - name: Test with pytest
      run: |
        pytest tests
    - name: Download latest iplocation files
      env:
        IP2TOKEN: ${{ secrets.SECRET_IP2LOCATION_DOWNLOAD_TOKEN }}
      run: |
        for f in ${ipv4_dbname} ${ipv6_dbname}; do curl -v "https://www.ip2location.com/download/?token=${IP2TOKEN}&file=${f}" -L -f --output ${HOME}/${f}.zip; done
    - name: Unzip downloaded files
      run: |
        unzip ${HOME}/${ipv4_dbname}.zip ${ipv4_csv} -d ${HOME}
        unzip ${HOME}/${ipv6_dbname}.zip ${ipv6_csv} -d ${HOME}
    - name: Convert to CIDR format
      run: |
        for f in ${ipv4_csv} ${ipv6_csv}; do python3 ip2location-csv-converter.py -cidr -replace ${HOME}/${f} ${HOME}/${f}.cidr; done
    - name: Extract EU countries only
      env:
        EU_GREP: '"AT"|"BE"|"BG"|"HR"|"CY"|"CZ"|"DK"|"EE"|"FI"|"FR"|"DE"|"GR"|"HU"|"IE"|"IT"|"LV"|"LT"|"LU"|"MT"|"NL"|"PL"|"PT"|"RO"|"SK"|"SI"|"ES"|"SE"|"GB"'
        US_CA_GREP: '"US"|"CA"'
        RU_GREP: '"RU"'
      run: |
       cat ${HOME}/${ipv4_csv}.cidr | grep -E ${EU_GREP} | cut -f 1 -d, | tr -d '"' >${HOME}/eu_ipv4.lst
       cat ${HOME}/${ipv6_csv}.cidr | grep -E ${EU_GREP} | cut -f 1 -d, | tr -d '"' >${HOME}/eu_ipv6.lst
       cat ${HOME}/${ipv4_csv}.cidr | grep -E ${US_CA_GREP} | cut -f 1 -d, | tr -d '"' >${HOME}/us_ca_ipv4.lst
       cat ${HOME}/${ipv6_csv}.cidr | grep -E ${US_CA_GREP} | cut -f 1 -d, | tr -d '"' >${HOME}/us_ca_ipv6.lst
       cat ${HOME}/${ipv4_csv}.cidr | grep -E ${RU_GREP} | cut -f 1 -d, | tr -d '"' >${HOME}/ru_ipv4.lst
       cat ${HOME}/${ipv6_csv}.cidr | grep -E ${RU_GREP} | cut -f 1 -d, | tr -d '"' >${HOME}/ru_ipv6.lst
    - name: GH Version
      env:
        GH_TOKEN: ${{ secrets.IP2LOC_GIST_TOKEN }}
      run: |
        gh --version
    - name: Resulting files to gist upload
      env:
        GH_TOKEN: ${{ secrets.IP2LOC_GIST_TOKEN }}
      run: |
        declare -A gist_ids
        gist_ids['eu_ipv4']='984a9457a00ea13a715a8074b323195b'
        gist_ids['eu_ipv6']='9fcaaf3aa83e2c0602a967fbe2e6df2b'
        gist_ids['ru_ipv4']='79feedaed11e73962cf97eb506529524'
        gist_ids['ru_ipv6']='b703c7c4c6a5238820d2401d7d9516c1'
        gist_ids['us_ca_ipv4']='6a21fa0338caf058158434ae78230834'
        gist_ids['us_ca_ipv6']='a0094eac0cd8aca1efff7fef096fd27e'        

        for c in eu us_ca ru; do for v in ipv4 ipv6
        do
          content=$(<${HOME}/${c}_${v}.lst)
          curl -d '{"files":{"${c}_${v}.lst":{"content":"${content}"}}}' -u donateni:${GH_TOKEN} -X PATCH https://api.github.com/gists/${gist_ids[${c}_${v}]}
          # echo "${c}_${v}.lst -> ${gist_ids[${c}_${v}]}"; gh gist edit ${gist_ids[${c}_${v}]} -f ${c}_${v}.lst ${HOME}/${c}_${v}.lst;
        done; done

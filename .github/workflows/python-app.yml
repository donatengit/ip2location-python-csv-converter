# This workflow will install Python dependencies, run tests and lint with a single version of Python
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python

name: Download merge and upload to GIST

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]
  schedule:
    - cron: "37 3 * * 2"
  workflow_dispatch:
    inputs:
      logLevel:
        description: 'Log level'
        required: true
        default: 'info'
        type: choice
        options:
        - info
        - warning
        - debug
      tags:
        description: 'Test scenario tags'
        required: false
        type: boolean
      environment:
        description: 'Environment to run tests against'
        type: environment
        required: true
        
env:
  ipv4_dbname: DB1LITECSV
  ipv6_dbname: DB1LITECSVIPV6
  ipv4_csv: IP2LOCATION-LITE-DB1.CSV
  ipv6_csv: IP2LOCATION-LITE-DB1.IPV6.CSV

permissions:
  contents: read

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
    - name: Set up Python 3.10
      uses: actions/setup-python@v3
      with:
        python-version: "3.10"
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8 pytest ipaddress
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
    - name: Lint with flake8
      run: |
        # stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    - name: Test with pytest
      run: |
        pytest tests
    - name: Download latest iplocation files
      env:
        IP2TOKEN: ${{ secrets.SECRET_IP2LOCATION_DOWNLOAD_TOKEN }}
      run: |
        for f in ${ipv4_dbname} ${ipv6_dbname}; do curl -v "https://www.ip2location.com/download/?token=${IP2TOKEN}&file=${f}" -L -f --output ${HOME}/${f}.zip; done
    - name: Unzip downloaded files
      run: |
        unzip ${HOME}/${ipv4_dbname}.zip ${ipv4_csv} -d ${HOME}
        unzip ${HOME}/${ipv6_dbname}.zip ${ipv6_csv} -d ${HOME}
    - name: Convert to CIDR format
      run: |
        for f in ${ipv4_csv} ${ipv6_csv}; do python3 ip2location-csv-converter.py -cidr -replace ${HOME}/${f} ${HOME}/${f}.cidr; done
    - name: Extract EU countries only
      env:
        EU_GREP: '"AT"|"BE"|"BG"|"HR"|"CY"|"CZ"|"DK"|"EE"|"FI"|"FR"|"DE"|"GR"|"HU"|"IE"|"IT"|"LV"|"LT"|"LU"|"MT"|"NL"|"PL"|"PT"|"RO"|"SK"|"SI"|"ES"|"SE"|"GB"'
        US_CA_GREP: '"US"|"CA"'
        RU_GREP: '"RU"'
      run: |
       cat ${HOME}/${ipv4_csv}.cidr | grep -E ${EU_GREP} | cut -f 1 -d, | tr -d '"' >${HOME}/eu_ipv4.lst
       cat ${HOME}/${ipv6_csv}.cidr | grep -E ${EU_GREP} | cut -f 1 -d, | tr -d '"' >${HOME}/eu_ipv6.lst
       cat ${HOME}/${ipv4_csv}.cidr | grep -E ${US_CA_GREP} | cut -f 1 -d, | tr -d '"' >${HOME}/us_ca_ipv4.lst
       cat ${HOME}/${ipv6_csv}.cidr | grep -E ${US_CA_GREP} | cut -f 1 -d, | tr -d '"' >${HOME}/us_ca_ipv6.lst
       cat ${HOME}/${ipv4_csv}.cidr | grep -E ${RU_GREP} | cut -f 1 -d, | tr -d '"' >${HOME}/ru_iplocation_ipv4.lst
       cat ${HOME}/${ipv6_csv}.cidr | grep -E ${RU_GREP} | cut -f 1 -d, | tr -d '"' >${HOME}/ru_iplocation_ipv6.lst
    - name: Download Yandex LLC ranges
      run: |
       curl -v "https://gist.githubusercontent.com/donatengit/6d26413409ddfb4168613272fe46eccd/raw" -L -f --output ${HOME}/ru_yandex_llc_ipv6.lst
       curl -v "https://gist.githubusercontent.com/donatengit/af31c0ee18f42af16c41bfeb15afc6c6/raw" -L -f --output ${HOME}/ru_yandex_llc_ipv4.lst
       stat ${HOME}/ru_yandex_llc_ipv*
    - name: Download latest MaxMind Country files
      env:
        MAXMIND_KEY: ${{ secrets.MAXMIND_GEOIP_COUNTRIES_KEY }}
      run: |
        curl -v "https://download.maxmind.com/app/geoip_download?edition_id=GeoLite2-Country-CSV&license_key=${MAXMIND_KEY}&suffix=zip" -L -f --output ${HOME}/maxmind_db.zip
        unzip -j -o ${HOME}/maxmind_db.zip -d ${HOME}
        maxmind_loc_id=`cat ${HOME}/GeoLite2-Country-Locations-en.csv | grep ,RU, | cut -d, -f 1`
        echo ${maxmind_loc_id}
        stat ${HOME}/GeoLite2*
        cat ${HOME}/GeoLite2-Country-Blocks-IPv4.csv | grep ",$maxmind_loc_id," | cut -f 1 -d, >${HOME}/ru_maxmind_ipv4.lst
        cat ${HOME}/GeoLite2-Country-Blocks-IPv6.csv | grep ",$maxmind_loc_id," | cut -f 1 -d, >${HOME}/ru_maxmind_ipv6.lst
    - name: Merge all RU cidr sources
      env:
        MAXMIND_KEY: ${{ secrets.MAXMIND_GEOIP_COUNTRIES_KEY }}
        MAXMIND_DB_ZIP: ${HOME}/maxmind_db.zip
      run: |
        for f in `ls ${HOME}/ru*`; do echo $f; wc -l $f; done
        python3 ip_cidr_merge.py ${HOME}/ru_ipv4.lst ${HOME}/ru_iplocation_ipv4.lst ${HOME}/ru_yandex_llc_ipv4.lst ${HOME}/ru_maxmind_ipv4.lst
        python3 ip_cidr_merge.py ${HOME}/ru_ipv6.lst ${HOME}/ru_iplocation_ipv6.lst ${HOME}/ru_yandex_llc_ipv6.lst ${HOME}/ru_maxmind_ipv6.lst
        for f in `ls ${HOME}/ru*`; do echo $f; wc -l $f; done
    - name: GH Version
      env:
        GH_TOKEN: ${{ secrets.IP2LOC_GIST_TOKEN }}
      run: |
        gh --version
    - name: Resulting files to gist upload
      env:
        GH_TOKEN: ${{ secrets.IP2LOC_GIST_TOKEN }}
      run: |
        gist_id=86a47c5e692361a472d783855a61730f

        curl "https://gist.githubusercontent.com/donatengit/${gist_id}/raw/gist_upload.py" -L -f --output ${HOME}/gist_upload.py

        for c in eu us_ca ru; do for v in ipv4 ipv6
        do
          python3 ${HOME}/gist_upload.py ${gist_id} ${c}_${v}.lst ${HOME}/${c}_${v}.lst
        done; done
